version: "2.2"
services:
  continuous-update:
    container_name: continuous-update-full
    restart: always
    networks:
      - ml-network-full
    build:
      context: .
      dockerfile: ./ContinuousUpdate/Dockerfile
      args:
        COPY_FROM_PATH: ./ContinuousUpdate
    environment:
      - PRODUCTION=1
    depends_on:
      - classify-api
      - searchforquery-api
      - recsys-api
  
  recsys-api:
    container_name: recsys-api-full
    restart: always
    networks:
      - recsys-network-full
      - mssql-network-full
      - ml-network-full
    build: 
      context: .
      dockerfile: ./RecSys/RecSysApi/Dockerfile
      args:
        COPY_FROM_PATH: ./RecSys/Publish
    ports:
      - "5003:5003"
    depends_on:
      - classify-api
      - searchforquery-api
      - mssql
    links:
      - mssql
  
  tagsappender-api:
    container_name: tagsappender-api-full
    restart: always
    networks:
      - mongo-network-full
      - ml-network-full
    build:
      context: .
      dockerfile: ./TagsAppender/Dockerfile
      args:
        COPY_FROM_PATH: ./TagsAppender
    ports:
      - "5004:5004"
    environment:
      - PRODUCTION=1
      - INDIVIDUAL=1
    depends_on:
      - mongo
    links:
      - mongo
      
  classify-api:
    container_name: classify-api-full
    restart: always
    networks:
      - mongo-network-full
      - mssql-network-full
      - ml-network-full
    build:
      context: .
      dockerfile: ./Classify/Dockerfile
      args:
        COPY_FROM_PATH: ./Classify
    cpus: 7.0
    mem_limit: 20480m
    memswap_limit: 23552m
    ports:
      - "5000:5000"
    environment:
      - PRODUCTION=1
    depends_on:
      - mongo
      - mssql
    links:
      - mongo
      - mssql

  searchforquery-api:
    container_name: searchforquery-api-full
    restart: always
    networks:
      - ml-network-full
      - mongo-network-full
    build:
      context: .
      dockerfile: ./SearchForQuery/Dockerfile
      args:
        COPY_FROM_PATH: ./SearchForQuery
    cpus: 7.0
    mem_limit: 20480m
    memswap_limit: 23552m
    ports:
      - "5001:5001"
    environment:
      - PRODUCTION=1
    depends_on:
      - mongo
    links:
      - mongo

  mongo-express:
    container_name: mongo-express-full
    image: mongo-express:1.0.0-alpha
    restart: always
    networks:
      - mongo-network-full
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: username
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      - mongo

  mongo:
    container_name: mongo-database-full
    image: mongo:5.0
    restart: always
    networks:
      - mongo-network-full
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: username
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: UPV
    volumes:
      - mongo-data-full:/data/db
      - ./Mongo/docker-entrypoint-initdb.d/initdb.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./Mongo/docker-entrypoint-initdb.d/restore.sh:/docker-entrypoint-initdb.d/restore.sh
      - ./Mongo/docker-entrypoint-initdb.d/UPV:/docker-entrypoint-initdb.d/UPV

  mssql:
    container_name: MSSQL-database-full
    build: ./MSSQL/mssql_database
    restart: always
    environment:
      MSSQL_PID: Express
    networks:
      - mssql-network-full
    ports:
      - '1433:1433'
    volumes:
      - mssql-data-full:/var/opt/mssql
      
      
  prometheus:
    image: prom/prometheus:latest
    container_name: monitoring_prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    expose:
      - 9090
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter

  node-exporter:
    image: prom/node-exporter:latest
    container_name: monitoring_node_exporter
    restart: unless-stopped
    expose:
      - 9100
    ports:
      - 9100:9100

  cadvisor:
    image: google/cadvisor:latest
    container_name: monitoring_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080
    ports:
      - 8080:8080
  
  grafana:
    image: grafana/grafana:latest
    container_name: monitoring_grafana
    restart: unless-stopped
    links:
      - prometheus:prometheus
    volumes:
      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=paardaap
    ports:
      - 3000:3000

networks:
  ml-network-full:
    external: false
    name: ml-network-full
  mongo-network-full:
    external: false
    name: mongo-network-full
  mssql-network-full:
    external: false
    name: mssql-network-full
  recsys-network-full:
    external: false
    name: recsys-network-full

volumes:
  mongo-data-full:
    driver: local
  mssql-data-full:
    driver: local